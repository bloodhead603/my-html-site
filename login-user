<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stellar Explorer - Login</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #1a2a6c, #2c3e50, #000000);
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
            overflow: hidden;
            position: relative;
        }
        
        .stars {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
        }
        
        .star {
            position: absolute;
            background-color: white;
            border-radius: 50%;
        }
        
        .auth-container {
            background: rgba(10, 20, 30, 0.85);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
            width: 90%;
            max-width: 400px;
            padding: 30px;
            z-index: 10;
            animation: fadeIn 0.8s ease-out;
        }
        
        .starfield-container {
            display: none;
            width: 100%;
            height: 100%;
            position: relative;
            overflow: hidden;
        }
        
        h1 {
            text-align: center;
            margin-bottom: 25px;
            font-weight: 600;
            font-size: 28px;
            color: #4fc3f7;
        }
        
        .tabs {
            display: flex;
            margin-bottom: 25px;
            border-bottom: 1px solid #2c3e50;
        }
        
        .tab {
            flex: 1;
            text-align: center;
            padding: 12px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
        }
        
        .tab.active {
            color: #4fc3f7;
            border-bottom: 2px solid #4fc3f7;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
        }
        
        input {
            width: 100%;
            padding: 12px 15px;
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid #2c3e50;
            border-radius: 8px;
            color: white;
            font-size: 16px;
            transition: all 0.3s ease;
        }
        
        input:focus {
            outline: none;
            border-color: #4fc3f7;
            box-shadow: 0 0 0 2px rgba(79, 195, 247, 0.3);
        }
        
        button {
            width: 100%;
            padding: 12px;
            background: linear-gradient(to right, #2196f3, #21cbf3);
            border: none;
            border-radius: 8px;
            color: white;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-top: 10px;
        }
        
        button:hover {
            background: linear-gradient(to right, #1e88e5, #00b0ff);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(33, 150, 243, 0.4);
        }
        
        .message {
            text-align: center;
            margin-top: 20px;
            padding: 10px;
            border-radius: 8px;
            font-size: 14px;
        }
        
        .success {
            background: rgba(46, 204, 113, 0.2);
            border: 1px solid #2ecc71;
        }
        
        .error {
            background: rgba(231, 76, 60, 0.2);
            border: 1px solid #e74c3c;
        }
        
        .user-info {
            position: absolute;
            top: 20px;
            right: 20px;
            background: rgba(10, 20, 30, 0.7);
            padding: 10px 15px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            z-index: 100;
        }
        
        .user-info span {
            margin-right: 10px;
        }
        
        .user-info button {
            width: auto;
            padding: 5px 10px;
            background: rgba(231, 76, 60, 0.3);
        }
        
        .user-info button:hover {
            background: rgba(231, 76, 60, 0.5);
        }
        
        .star-editor {
            position: absolute;
            bottom: 20px;
            left: 20px;
            background: rgba(10, 20, 30, 0.85);
            padding: 20px;
            border-radius: 10px;
            width: 300px;
            z-index: 100;
        }
        
        .star-list {
            max-height: 200px;
            overflow-y: auto;
            margin-top: 10px;
        }
        
        .star-item {
            padding: 8px;
            margin: 5px 0;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 5px;
            cursor: pointer;
            display: flex;
            justify-content: space-between;
        }
        
        .star-item:hover {
            background: rgba(79, 195, 247, 0.2);
        }
        
        .star-item.selected {
            background: rgba(79, 195, 247, 0.4);
        }
        
        .action-buttons {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }
        
        .action-buttons button {
            flex: 1;
        }
        
        .btn-secondary {
            background: rgba(255, 255, 255, 0.1) !important;
        }
        
        .btn-secondary:hover {
            background: rgba(255, 255, 255, 0.2) !important;
        }
        
        .instructions {
            margin-top: 20px;
            font-size: 14px;
            color: #aaa;
            text-align: center;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        @keyframes twinkle {
            0% { opacity: 0.2; }
            50% { opacity: 1; }
            100% { opacity: 0.2; }
        }
    </style>
</head>
<body>
    <!-- Background stars for the login screen -->
    <div class="stars" id="loginStars"></div>
    
    <!-- Authentication Container -->
    <div class="auth-container" id="authContainer">
        <h1><i class="fas fa-star"></i> Stellar Explorer</h1>
        
        <div class="tabs">
            <div class="tab active" id="loginTab">Login</div>
            <div class="tab" id="registerTab">Register</div>
        </div>
        
        <!-- Login Form -->
        <form id="loginForm">
            <div class="form-group">
                <label for="loginEmail">Email</label>
                <input type="email" id="loginEmail" placeholder="Enter your email" required>
            </div>
            
            <div class="form-group">
                <label for="loginPassword">Password</label>
                <input type="password" id="loginPassword" placeholder="Enter your password" required>
            </div>
            
            <button type="submit">Login to Starfield</button>
            
            <div class="message" id="loginMessage"></div>
        </form>
        
        <!-- Registration Form -->
        <form id="registerForm" style="display: none;">
            <div class="form-group">
                <label for="registerName">Full Name</label>
                <input type="text" id="registerName" placeholder="Enter your full name" required>
            </div>
            
            <div class="form-group">
                <label for="registerEmail">Email</label>
                <input type="email" id="registerEmail" placeholder="Enter your email" required>
            </div>
            
            <div class="form-group">
                <label for="registerPassword">Password</label>
                <input type="password" id="registerPassword" placeholder="Create a password" required>
            </div>
            
            <div class="form-group">
                <label for="registerConfirmPassword">Confirm Password</label>
                <input type="password" id="registerConfirmPassword" placeholder="Confirm your password" required>
            </div>
            
            <button type="submit">Create Account</button>
            
            <div class="message" id="registerMessage"></div>
        </form>
        
        <div class="instructions">
            <p>Login or register to access the starfield simulation. Teachers can save their custom star configurations.</p>
        </div>
    </div>
    
    <!-- Starfield Container (Initially Hidden) -->
    <div class="starfield-container" id="starfieldContainer">
        <canvas id="starfield"></canvas>
        
        <div class="user-info">
            <span id="userNameDisplay">Welcome, User</span>
            <button id="logoutBtn"><i class="fas fa-sign-out-alt"></i> Logout</button>
        </div>
        
        <div class="star-editor">
            <h3>Star Editor <i class="fas fa-star"></i></h3>
            <div class="action-buttons">
                <button id="addStarBtn"><i class="fas fa-plus"></i> Add Star</button>
                <button id="saveStarsBtn"><i class="fas fa-save"></i> Save Stars</button>
            </div>
            
            <div class="star-list" id="starList">
                <!-- Star list will be populated here -->
            </div>
        </div>
    </div>
    
    <script>
        // DOM Elements
        const authContainer = document.getElementById('authContainer');
        const starfieldContainer = document.getElementById('starfieldContainer');
        const loginForm = document.getElementById('loginForm');
        const registerForm = document.getElementById('registerForm');
        const loginTab = document.getElementById('loginTab');
        const registerTab = document.getElementById('registerTab');
        const loginMessage = document.getElementById('loginMessage');
        const registerMessage = document.getElementById('registerMessage');
        const logoutBtn = document.getElementById('logoutBtn');
        const userNameDisplay = document.getElementById('userNameDisplay');
        const addStarBtn = document.getElementById('addStarBtn');
        const saveStarsBtn = document.getElementById('saveStarsBtn');
        const starList = document.getElementById('starList');
        const loginStars = document.getElementById('loginStars');
        
        // State management
        let currentUser = null;
        let stars = [];
        let selectedStarId = null;
        
        // Switch between login and register tabs
        loginTab.addEventListener('click', () => {
            loginTab.classList.add('active');
            registerTab.classList.remove('active');
            loginForm.style.display = 'block';
            registerForm.style.display = 'none';
            clearMessages();
        });
        
        registerTab.addEventListener('click', () => {
            registerTab.classList.add('active');
            loginTab.classList.remove('active');
            registerForm.style.display = 'block';
            loginForm.style.display = 'none';
            clearMessages();
        });
        
        // Clear message displays
        function clearMessages() {
            loginMessage.textContent = '';
            loginMessage.className = 'message';
            registerMessage.textContent = '';
            registerMessage.className = 'message';
        }
        
        // User Registration
        registerForm.addEventListener('submit', (e) => {
            e.preventDefault();
            
            const name = document.getElementById('registerName').value;
            const email = document.getElementById('registerEmail').value;
            const password = document.getElementById('registerPassword').value;
            const confirmPassword = document.getElementById('registerConfirmPassword').value;
            
            if (password !== confirmPassword) {
                registerMessage.textContent = 'Passwords do not match!';
                registerMessage.className = 'message error';
                return;
            }
            
            // In a real app, this would be a server request
            // For this demo, we'll simulate a successful registration
            registerMessage.textContent = 'Account created successfully! Please login.';
            registerMessage.className = 'message success';
            
            // Clear form
            registerForm.reset();
            
            // Switch to login tab
            setTimeout(() => {
                loginTab.click();
                document.getElementById('loginEmail').value = email;
                document.getElementById('loginPassword').value = password;
            }, 1500);
        });
        
        // User Login
        loginForm.addEventListener('submit', (e) => {
            e.preventDefault();
            
            const email = document.getElementById('loginEmail').value;
            const password = document.getElementById('loginPassword').value;
            
            // In a real app, this would be a server request with password hashing
            // For this demo, we'll simulate a successful login
            loginMessage.textContent = 'Login successful! Loading starfield...';
            loginMessage.className = 'message success';
            
            // Set current user
            currentUser = {
                id: 'user_' + Date.now(),
                name: email.split('@')[0],
                email: email
            };
            
            // Load user's saved stars from localStorage
            const savedStars = localStorage.getItem(`stars_${currentUser.id}`);
            if (savedStars) {
                stars = JSON.parse(savedStars);
            }
            
            // Simulate loading time
            setTimeout(() => {
                authContainer.style.display = 'none';
                starfieldContainer.style.display = 'block';
                userNameDisplay.textContent = `Welcome, ${currentUser.name}`;
                initStarfield();
                renderStarList();
            }, 1500);
        });
        
        // Logout functionality
        logoutBtn.addEventListener('click', () => {
            // Save stars before logout
            saveStars();
            
            // Reset UI
            authContainer.style.display = 'block';
            starfieldContainer.style.display = 'none';
            loginForm.reset();
            clearMessages();
            loginTab.click();
            
            // Clear user data
            currentUser = null;
            stars = [];
            selectedStarId = null;
        });
        
        // Star management
        function saveStars() {
            if (currentUser) {
                localStorage.setItem(`stars_${currentUser.id}`, JSON.stringify(stars));
            }
        }
        
        // Initialize background stars for login page
        function initLoginStars() {
            // Clear existing stars
            loginStars.innerHTML = '';
            
            // Create 150 stars for the background
            for (let i = 0; i < 150; i++) {
                const star = document.createElement('div');
                star.className = 'star';
                
                // Random position
                const x = Math.random() * 100;
                const y = Math.random() * 100;
                star.style.left = `${x}%`;
                star.style.top = `${y}%`;
                
                // Random size
                const size = Math.random() * 3;
                star.style.width = `${size}px`;
                star.style.height = `${size}px`;
                
                // Random opacity and animation delay
                const opacity = 0.2 + Math.random() * 0.8;
                star.style.opacity = opacity;
                star.style.animation = `twinkle ${2 + Math.random() * 5}s infinite`;
                star.style.animationDelay = `${Math.random() * 5}s`;
                
                loginStars.appendChild(star);
            }
        }
        
        // Initialize starfield canvas
        function initStarfield() {
            const canvas = document.getElementById('starfield');
            const ctx = canvas.getContext('2d');
            
            // Set canvas to full window size
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            
            // Handle window resize
            window.addEventListener('resize', () => {
                canvas.width = window.innerWidth;
                canvas.height = window.innerHeight;
                renderStarfield();
            });
            
            // Add star on click
            canvas.addEventListener('click', (e) => {
                if (selectedStarId) {
                    // If a star is selected, update its position
                    const star = stars.find(s => s.id === selectedStarId);
                    if (star) {
                        star.x = e.clientX;
                        star.y = e.clientY;
                        renderStarfield();
                        renderStarList();
                    }
                } else {
                    // Add new star
                    const newStar = {
                        id: 'star_' + Date.now(),
                        name: `Star ${stars.length + 1}`,
                        x: e.clientX,
                        y: e.clientY,
                        size: 10 + Math.random() * 10,
                        color: `hsl(${Math.random() * 360}, 100%, 70%)`
                    };
                    
                    stars.push(newStar);
                    renderStarfield();
                    renderStarList();
                    
                    // Select the new star
                    selectedStarId = newStar.id;
                    highlightSelectedStar();
                }
            });
            
            // Initial render
            renderStarfield();
        }
        
        // Render the starfield
        function renderStarfield() {
            const canvas = document.getElementById('starfield');
            const ctx = canvas.getContext('2d');
            
            // Clear canvas
            ctx.fillStyle = 'rgba(10, 20, 30, 0.2)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // Draw stars
            stars.forEach(star => {
                ctx.beginPath();
                ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2);
                
                // Create gradient
                const gradient = ctx.createRadialGradient(
                    star.x, star.y, 0,
                    star.x, star.y, star.size
                );
                gradient.addColorStop(0, 'white');
                gradient.addColorStop(0.4, star.color);
                gradient.addColorStop(1, 'transparent');
                
                ctx.fillStyle = gradient;
                ctx.fill();
                
                // Add glow effect
                ctx.shadowColor = star.color;
                ctx.shadowBlur = 15;
                ctx.fill();
                ctx.shadowBlur = 0;
                
                // Draw star name
                if (star.name) {
                    ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
                    ctx.font = '12px Arial';
                    ctx.textAlign = 'center';
                    ctx.fillText(star.name, star.x, star.y - star.size - 10);
                }
            });
            
            // Highlight selected star
            if (selectedStarId) {
                const star = stars.find(s => s.id === selectedStarId);
                if (star) {
                    ctx.beginPath();
                    ctx.arc(star.x, star.y, star.size + 5, 0, Math.PI * 2);
                    ctx.strokeStyle = '#4fc3f7';
                    ctx.lineWidth = 2;
                    ctx.stroke();
                }
            }
        }
        
        // Render the star list in the editor
        function renderStarList() {
            starList.innerHTML = '';
            
            stars.forEach(star => {
                const starItem = document.createElement('div');
                starItem.className = 'star-item';
                if (star.id === selectedStarId) {
                    starItem.classList.add('selected');
                }
                
                starItem.innerHTML = `
                    <span>${star.name}</span>
                    <span>${Math.round(star.size)}px</span>
                `;
                
                starItem.addEventListener('click', () => {
                    selectedStarId = star.id;
                    highlightSelectedStar();
                    renderStarfield();
                });
                
                starList.appendChild(starItem);
            });
        }
        
        // Highlight the selected star
        function highlightSelectedStar() {
            const starItems = document.querySelectorAll('.star-item');
            starItems.forEach(item => {
                item.classList.remove('selected');
            });
            
            if (selectedStarId) {
                const selectedItem = [...starItems].find(item => {
                    return item.querySelector('span').textContent === 
                        stars.find(s => s.id === selectedStarId).name;
                });
                
                if (selectedItem) {
                    selectedItem.classList.add('selected');
                }
            }
        }
        
        // Add new star button
        addStarBtn.addEventListener('click', () => {
            selectedStarId = null;
            highlightSelectedStar();
        });
        
        // Save stars button
        saveStarsBtn.addEventListener('click', () => {
            saveStars();
            
            // Show temporary success message
            const msg = document.createElement('div');
            msg.className = 'message success';
            msg.textContent = 'Stars saved successfully!';
            msg.style.position = 'fixed';
            msg.style.top = '20px';
            msg.style.left = '50%';
            msg.style.transform = 'translateX(-50%)';
            msg.style.zIndex = '1000';
            document.body.appendChild(msg);
            
            setTimeout(() => {
                msg.remove();
            }, 2000);
        });
        
        // Initialize login page stars
        initLoginStars();
        
        // Add a resize handler for the login stars
        window.addEventListener('resize', initLoginStars);
    </script>
</body>
</html>
